server:
  port: 8400
keycloak:
  auth-server-url: http://${KEYCLOAK_HOST:localhost}:8085
  realm: ${KEYCLOAK_REALM:microservices-realm}
  client-id: ${KEYCLOAK_CLIENT_ID:microservice-auth}
  client-secret: ${KEYCLOAK_CLIENT_SECRET:4aZFLYMeRdj4K1IhD7Ify0wjOiMukETk}
spring:
  redis:
    host: redis         # Kubernetes Redis service name
    port: 6379
  application:
    name: gateway-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://${KEYCLOAK_HOST:localhost}:8085/realms/${KEYCLOAK_REALM:microservices-realm}
  main:
    allow-bean-definition-overriding: true
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: http://${USER_SERVICE_NAME:localhost}:8000 #User
          predicates:
            - Path=/users/**
        - id: order-service
          uri: http://${ORDER_SERVICE_NAME:localhost}:8200 #Order
          predicates:
            - Path=/orders/**
        - id: product-service
          uri: http://${PRODUCT_SERVICE_NAME:localhost}:8300 #Product
          predicates:
            - Path=/products/**
        - id: auth-token-api
          uri: forward:/auth/token #http://localhost:8400
          predicates:
            - Path=/auth/token
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1       # 5 requests/sec
                redis-rate-limiter.burstCapacity: 10      # burst up to 10
                key-resolver: "#{@ipKeyResolver}"
management:
  endpoints:
    web:
      exposure:
        include: gateway,health,info
logging:
  level:
    org.springframework.cloud.gateway: DEBUG

#  instance:
#    prefer-ip-address: true
#    ip-address: 127.0.0.1